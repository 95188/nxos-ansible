#!/usr/bin/env python

# Copyright 2015 Michael Ben-Ami <michael@networktocode.com>
# Network to Code, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_vtp
short_description: Manages VTP configuration
description:
    - Manages VTP configuration
author: Michael Ben-Ami
requirements:
    - NX-API 1.0
    - NX-OS 6.1(2)I3(1)
    - pycsco
notes:
    - state=absent can only be used to remove the VTP password.
      If state=absent, and parameters other than VTP password are supplied the module will fail.
    - A VTP password must be set at the same time or after the VTP domain name is set.
    - If a VTP version number isn't, supplied the switch defaults to version 1.
    - While username and password are not required params, they are
      if you are not using the .netauth file.  .netauth file is recommended
      as it will clean up the each task in the playbook by not requiring
      the username and password params for every tasks.
    - Using the username and password params will override the .netauth file
options:
    domain:
        description:
            - VTP domain name
        required: false
        default: null
        choices: []
        aliases: []
    version:
        description:
            - VTP version number
        required: false
        default: null
        choices: ['1', '2']
        aliases: []
    vtp_password:
        description:
            - VTP password
        required: false
        default: null
        choices: []
        aliases: []
    state:
        description:
            - Manage the state of the resource
        required: true
        default: present
        choices: ['present','absent']
        aliases: []
    host:
        description:
            - IP Address or hostname (resolvable by Ansible control host)
              of the target NX-API enabled switch
        required: true
        default: null
        choices: []
        aliases: []
    username:
        description:
            - Username used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    password:
        description:
            - Password used to login to the switch
        required: false
        default: null
        choices: []
        aliases: []
    protocol:
        description:
            - Dictates connection protocol to use for NX-API
        required: false
        default: http
        choices: ['http','https']
        aliases: []
'''
EXAMPLES = '''

'''

import socket

HAS_PYCSCO = True
try:
    from pycsco.nxos.device import Device
    from pycsco.nxos.device import Auth
    from pycsco.nxos.utils import vtp
    from pycsco.nxos.utils import nxapi_lib
    from pycsco.nxos.error import CLIError
except ImportError as e:
    HAS_PYCSCO = False
    
def config_vtp(device, params):
    vtp_commands = []
    
    domain = params.get('domain')
    if domain:
        vtp_commands.append('vtp domain ' + domain)
    
    version = params.get('version')
    if version:
        vtp_commands.append('vtp version ' + version)

    password  = params.get('vtp_password')
    if password:
        vtp_commands.append('vtp password ' + password)

    return vtp_commands

def remove_vtp_password(device, params):
    vtp_commands = []

    password = params.get('vtp_password')
    if password:
        vtp_commands.append('no vtp password')

    return vtp_commands

def main():
    module = AnsibleModule(
        argument_spec=dict(
            domain=dict(type='str'),
            version=dict(type='str'),
            vtp_password=dict(type='str'),
            state=dict(choices=['absent', 'present'],
                       default='present'),
            host=dict(required=True),
            username=dict(default='cisco'),
            password=dict(default='!cisco123!'),
            protocol=dict(choices=['http', 'https'],
                          default='http')
        ),
        supports_check_mode=True
    )

    if not HAS_PYCSCO:
        module.fail_json(msg='pycsco is required for this module')

    common_keys = ('state', 'host', 'username', 'password', 'protocol', 'CHECKMODE')
    
    auth = Auth(vendor='cisco', model='nexus')

    username = module.params['username'] or auth.username
    password = module.params['password'] or auth.password

    protocol = module.params['protocol']
    host = socket.gethostbyname(module.params['host'])
    device = Device(ip=host, username=username, password=password, protocol=protocol)
    changed = False

    proposed = dict((k, v) for k, v in module.params.iteritems() if v is not None and k not in common_keys)
    commands = []

    if not nxapi_lib.feature_enabled(device, 'vtp'):
        module.fail_json(msg='vtp not enabled on device')

    if module.params['state'] == 'absent':
        if 'domain' in proposed:
            module.fail_json(msg='To remove a domain, you must disable and re-enable the vtp feature. state=absent is not appropriate for this task')
        if 'version' in proposed:
            module.fail_json(msg='The version parameter is not supported when state=absent. Version can be set to \'1\' or \'2\' when state=present')

    existing = vtp.get_vtp_current_cfg(device)

    if module.params['state'] == 'absent':
        if existing['vtp_password'] == proposed['vtp_password']:
            command = remove_vtp_password(device, proposed)
            if command:
                commands.append(command)
        else:
            module.fail_json(msg='Proposed vtp password does not match current vtp password. So it cannot be removed when state=absent. \
                If you are trying to change the vtp password, use state=present.')
    elif module.params['state'] == 'present':
        delta = dict(set(proposed.iteritems()).difference(existing.iteritems()))
        if delta:
            if delta.get('vtp_password'):
                if not existing.get('domain') and not proposed.get('domain'):   
                    module.fail_json(msg='Cannot set vtp password before vtp domain is set')
            command = config_vtp(device, delta)
            if command:
                commands.append(command)

    new = None
    cmds = ''
    if commands:
        cmds = nxapi_lib.nested_cmd_list_to_string(commands)
        if module.check_mode:
            module.exit_json(changed=True, commands=cmds)
        else:
            changed = True
            try:
                device.config(cmds)
                new = vtp.get_vtp_current_cfg(device)
            except CLIError as e:
                module.fail_json(msg=str(e))

   
    results = {}
    results['proposed'] = proposed
    results['existing'] = existing
    results['new'] = new
    results['state'] = module.params['state']
    results['commands'] = cmds
    results['changed'] = changed
    if new:
        results['final'] = new
    else:
        results['final'] = existing

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
